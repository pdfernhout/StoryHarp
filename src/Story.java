//Generated by StoryHarp from http://www.kurtz-fernhout.com
//Java Shell Portions Copyright 1998 Kurtz-Fernhout Software
import java.awt.*;
import java.util.StringTokenizer;
 
@SuppressWarnings("deprecation")
public class Story extends java.applet.Applet
  {
  private static final long serialVersionUID = 1L;
  private static final int NUMROWS=20;
  private static final int NUMCOLS=47;
  TextArea text = new TextArea("", NUMROWS, NUMCOLS);
  List choices = new List(0, false);
  int numVariables;
  int numRules;
  int currentLocation;
  int wrapCol = 0;
  // define array for name of variables
  String variableName[];
  // define array for value of variables (true or false)
  boolean variableValue[];
  // define array for whether command is available (and so is added to list already)
  boolean variableIsAvailableCommand[];
  // define array for whether all of rules requirements (including context) hold
  boolean ruleSatisfied[];
  Button doIt;
  Button resetButton;
  Button aboutButton;
  boolean resetArmed;

  public void init()
    {
    setLayout(null);
    numVariables = SHNumberVariables();
    numRules = SHNumberRules();
    int width = Integer.parseInt(getParameter("width"));
    int height = Integer.parseInt(getParameter("height"));
    setFont ( new Font("Courier",Font.PLAIN,12));
    add(text);
    text.reshape(0, 0, width, height / 2);
    add(choices);
    choices.reshape(0, height / 2, width, height / 2 - 30);

    doIt = new Button("Do it");
    add(doIt);
    doIt.reshape(0, height - 30, width/3, 30);

    resetButton = new Button("Reset");
    add(resetButton);
    resetButton.reshape(width/3, height - 30, width/3, 30);

    aboutButton = new Button("About");
    add(aboutButton);
    aboutButton.reshape(2 * width/3, height - 30, width/3, 30);

    resize(400, 400);
    allocateSpace();
    SHDefineVariables();
    storyReset();
    }

  public void storyReset()
    {
    text.setText("");
    for (int i = 0; i < numVariables; i++) variableValue[i] = false;
    initialLocation();
    SHComputeSatisfiedRules();
    // AddFeedbackForCommand(SHFirstCommand());
    SHDoCommand(SHFirstCommand());
    setChoices();
    }

  public boolean action (Event e, Object o)
    {
    int command;
    if (o instanceof String)
      {
      if (e.target == aboutButton)
        {
        resetArmed = false;
        reply("\n\n========================================\n");
        reply("This applet's source was generated using\n");
        reply("the StoryHarp(TM) Authoring System\n");
        reply("from http://www.kurtz-fernhout.com\n");
        reply("StoryHarp and portions of the source are\n");
        reply("Copyright 1998 Kurtz-Fernhout Software\n");
        reply("========================================\n");
        }
      if (e.target == resetButton)
        {
        if (resetArmed)
          {
          storyReset();
          }
        else
          {
          reply("\n\n*** Press 'Reset' again now to reset ***\n");
          resetArmed = true;
          }
        }
      else if (choices.getSelectedIndex() >= 0)
        {
        resetArmed = false;
        command = lookupCommand(choices.getSelectedItem());
        AddFeedbackForCommand(command);
        SHDoCommand(command);
        }
      setChoices();
      }
    return false;
    }

public void setChoices()
    {
    if (choices.getSelectedIndex() >= 0)
      choices.deselect(choices.getSelectedIndex());
    if (choices.countItems() > 0)
      choices.delItems(0, choices.countItems() - 1);
    clearCommandAvailableFlags();
    SHComputeSatisfiedRules();
    SHAddAvailableCommands();
    }

  void addCommand(int c)
    {
    if (!variableIsAvailableCommand[c])
      {
      choices.addItem(variableName[c]);
      variableIsAvailableCommand[c] = true;
      }
    }

  void move(int location)
    {
    variableValue[currentLocation] = false;
    variableValue[location] = true;
    currentLocation = location;
    }

  void reply(String longstring)
    {
    StringTokenizer st = new StringTokenizer(longstring, " \n{}", true);
    while(st.hasMoreTokens())
      {
      String token = st.nextToken();
      if(token.equals("\n"))
        {
        text.appendText("\n");
        wrapCol = 0;
        continue;
        }
      // eat macros for now without doing anything for them
      if (token.equals("{")) {
        while(st.hasMoreTokens() && (!st.nextToken().equals("}")));
        continue;
        }
      int length = token.length();
      if( (wrapCol+length)>=NUMCOLS)
        { // token exceeds line
        wrapCol = 0;
        text.appendText("\n");
        }
      if(token.equals(" "))
        if(wrapCol == 0)
          continue;
      wrapCol += length;
      text.appendText(token);
      }
    }
  // may not be needed if store number for list entry
  int lookupCommand(String commandString)
    {
    int i;
    for (i = 0; i < numVariables; i++)
       {
       if (variableName[i] == commandString) return i;
       }
    return -1;
    }

  void allocateSpace()
    {
    variableName = new String[numVariables];
    variableValue = new boolean[numVariables];
    variableIsAvailableCommand = new boolean[numVariables];
    ruleSatisfied = new boolean[numRules];
    }

  void initialLocation()
    {
    // initial location
    currentLocation = SHFirstLocation();
    variableValue[currentLocation] = true;
    }

  void clearCommandAvailableFlags()
    {
    for (int i = 0; i < numVariables; i++)
      {
      variableIsAvailableCommand[i] = false;
      }
    }

  void AddFeedbackForCommand(int command)
    {
    reply("\n\n>> ");
    reply(variableName[command]);
    reply("\n");
    }

  //
  // The following functions are specific to the story.
  // They were custom generated by StoryHarp.
  //


  int SHNumberVariables()
    {
    return 40;
    }

  int SHNumberRules()
    {
    return 27;
    }

  int SHFirstLocation()
    {
    return 0;
    }

  int SHFirstCommand()
    {
    return 1;
    }

  void SHDefineVariables()
    {
    variableName[0] = "house";
    variableName[1] = "look";
    variableName[2] = "plants watered";
    variableName[3] = "water the plants";
    variableName[4] = "water the plants again";
    variableName[5] = "tidy up";
    variableName[6] = "tidied up";
    variableName[7] = "tidy up some more";
    variableName[8] = "go out to the yard";
    variableName[9] = "yard";
    variableName[10] = "work on the puzzle";
    variableName[11] = "worked on puzzle";
    variableName[12] = "work on the puzzle some more";
    variableName[13] = "found red piece";
    variableName[14] = "work on the puzzle again";
    variableName[15] = "walk in circles";
    variableName[16] = "go inside";
    variableName[17] = "where is harold?";
    variableName[18] = "pat the bunny";
    variableName[19] = "tried to pat bunny";
    variableName[20] = "really pat the bunny";
    variableName[21] = "look at the sky";
    variableName[22] = "looked at sky";
    variableName[23] = "look at the sky some more";
    variableName[24] = "saw harold";
    variableName[25] = "look at the sky again";
    variableName[26] = "lie on the grass";
    variableName[27] = "thought about lying on the grass";
    variableName[28] = "really lie on the grass";
    variableName[29] = "lied on grass";
    variableName[30] = "lie on the grass again";
    variableName[31] = "look at the herb garden";
    variableName[32] = "looked at the herb garden";
    variableName[33] = "poke around in the herb garden";
    variableName[34] = "poked around in the herb garden";
    variableName[35] = "turn over the herb garden";
    variableName[36] = "found toy";
    variableName[37] = "look at the diamond ring";
    variableName[38] = "looked at toy";
    variableName[39] = "look at the diamond ring again";
    }

  void SHComputeSatisfiedRules()
    {
    ruleSatisfied[0] = variableValue[0];
    ruleSatisfied[1] = variableValue[0] && !variableValue[2];
    ruleSatisfied[2] = variableValue[0] && !variableValue[2];
    ruleSatisfied[3] = variableValue[0] && variableValue[2];
    ruleSatisfied[4] = variableValue[0] && !variableValue[6];
    ruleSatisfied[5] = variableValue[0] && variableValue[6];
    ruleSatisfied[6] = variableValue[0];
    ruleSatisfied[7] = variableValue[0] && !variableValue[11];
    ruleSatisfied[8] = variableValue[0] && variableValue[11] && !variableValue[13];
    ruleSatisfied[9] = variableValue[0] && variableValue[11] && variableValue[13];
    ruleSatisfied[10] = variableValue[9];
    ruleSatisfied[11] = variableValue[9];
    ruleSatisfied[12] = variableValue[9];
    ruleSatisfied[13] = variableValue[9];
    ruleSatisfied[14] = variableValue[9] && !variableValue[19];
    ruleSatisfied[15] = variableValue[9] && variableValue[19];
    ruleSatisfied[16] = variableValue[9] && !variableValue[22];
    ruleSatisfied[17] = variableValue[9] && variableValue[22] && !variableValue[24];
    ruleSatisfied[18] = variableValue[9] && variableValue[24];
    ruleSatisfied[19] = variableValue[9] && !variableValue[27];
    ruleSatisfied[20] = variableValue[9] && variableValue[27] && !variableValue[29];
    ruleSatisfied[21] = variableValue[9] && variableValue[29];
    ruleSatisfied[22] = variableValue[9] && !variableValue[32];
    ruleSatisfied[23] = variableValue[9] && !variableValue[34] && variableValue[32];
    ruleSatisfied[24] = variableValue[9] && variableValue[34] && !variableValue[36];
    ruleSatisfied[25] = variableValue[9] && variableValue[36] && !variableValue[38];
    ruleSatisfied[26] = variableValue[9] && variableValue[38];
    }

  void SHAddAvailableCommands()
    {
    if (ruleSatisfied[0]) addCommand(1);
    if (ruleSatisfied[1]) addCommand(1);
    if (ruleSatisfied[2]) addCommand(3);
    if (ruleSatisfied[3]) addCommand(4);
    if (ruleSatisfied[4]) addCommand(5);
    if (ruleSatisfied[5]) addCommand(7);
    if (ruleSatisfied[6]) addCommand(8);
    if (ruleSatisfied[7]) addCommand(10);
    if (ruleSatisfied[8]) addCommand(12);
    if (ruleSatisfied[9]) addCommand(14);
    if (ruleSatisfied[10]) addCommand(1);
    if (ruleSatisfied[11]) addCommand(15);
    if (ruleSatisfied[12]) addCommand(16);
    if (ruleSatisfied[13]) addCommand(17);
    if (ruleSatisfied[14]) addCommand(18);
    if (ruleSatisfied[15]) addCommand(20);
    if (ruleSatisfied[16]) addCommand(21);
    if (ruleSatisfied[17]) addCommand(23);
    if (ruleSatisfied[18]) addCommand(25);
    if (ruleSatisfied[19]) addCommand(26);
    if (ruleSatisfied[20]) addCommand(28);
    if (ruleSatisfied[21]) addCommand(30);
    if (ruleSatisfied[22]) addCommand(31);
    if (ruleSatisfied[23]) addCommand(33);
    if (ruleSatisfied[24]) addCommand(35);
    if (ruleSatisfied[25]) addCommand(37);
    if (ruleSatisfied[26]) addCommand(39);
    }

  void SHDoCommand(int command)
    {
    if (command == 1 && ruleSatisfied[0])
      {
      reply("You are in a sturdy brick house, a flavorful house, a cheery house. You live here. It's a warm bright day, you're wearing your favorite purple bathrobe, you've just had a big breakfast, and you've just finished reading the paper.");
      }
    if (command == 1 && ruleSatisfied[1])
      {
      reply("The plants look a little abandoned over there by the window.");
      }
    if (command == 3 && ruleSatisfied[2])
      {
      reply("Let's see. Three plants are still hanging on to life. One has been half-eaten by Harold, and another one dried up. But the two plants you repotted a few months ago look fine. Those spider plants never stop making babies. You fill the water pitcher three times and water the plants, then sit down in the chair. You love the percolating sound and the satisfied smell.");
      variableValue[2] = true;
      }
    if (command == 4 && ruleSatisfied[3])
      {
      reply("The plants are still pretty wet right now. You check that they all got enough water, then sit down and enjoy their happiness for a while.");
      }
    if (command == 5 && ruleSatisfied[4])
      {
      reply("You meander around the living room picking up stray junk mail and advertisements that fell out of magazines. You put away some of Harold's toys. You pick up the glass and bowl you left on the coffee table last night, and put them on the kitchen counter. You straighten the rug that never stays straight.");
      variableValue[6] = true;
      }
    if (command == 7 && ruleSatisfied[5])
      {
      reply("Well, if you clean any more it won't be fun. You might as well enjoy your day off for a little longer.");
      }
    if (command == 8 && ruleSatisfied[6])
      {
      reply("You open the screen door and walk outside, humming a silly tune.");
      move(9);
      }
    if (command == 10 && ruleSatisfied[7])
      {
      reply("You've almost got that man wearing green put together, but his green is almost like the green on the shutters so it's been difficult. And yesterday Harold ate a red piece so the whole thing seems kind of fruitless now. But it's still fun when a piece fits right in. You find a few matches while you hover over the table.");
      variableValue[11] = true;
      }
    if (command == 12 && ruleSatisfied[8])
      {
      reply("Aha! There's the red piece you thought Harold ate! The stinker, he just hid it over by the windowsill. You put it on the pile of red and off-red pieces on the table. But the puzzle seems a little boring right now so you don't work on it any more.");
      variableValue[13] = true;
      }
    if (command == 14 && ruleSatisfied[9])
      {
      reply("Boring. Do something else!");
      }
    if (command == 1 && ruleSatisfied[10])
      {
      reply("It's spring, and it's Mudville out here. What a mess! But the air is so fresh it feels like you should be able to fly. The grass is struggling to make a comeback, and some foolish lilies are bursting out of the ground. Be careful, my friends! Give it another week.");
      }
    if (command == 15 && ruleSatisfied[11])
      {
      reply("Pacing is terribly underrated. Walking in a prescribed circle always feels good. That's why you put the patio stones just where you did. Three paces, turn, two paces, turn, four paces, turn.");
      }
    if (command == 16 && ruleSatisfied[12])
      {
      reply("I really have to fix that hinge, you think as you hear the shreiking door close after you.");
      move(0);
      }
    if (command == 17 && ruleSatisfied[13])
      {
      reply("Oh, he's around here somewhere.");
      }
    if (command == 18 && ruleSatisfied[14])
      {
      reply("You can't pat the bunny, it's wild. It comes by all the time and sometimes it eats stuff you put on the compost pile. It eats plants in your garden, too, but you don't care. Just watching the plants come up is all you want from the garden. It's like a fish tank outside, only the plants last longer than fish.");
      variableValue[19] = true;
      }
    if (command == 20 && ruleSatisfied[15])
      {
      reply("It's a wild rabbit. I just said \"pat the bunny\" as a joke! There's a children's book by that name, okay? Leave the poor rabbit alone. Geez.");
      }
    if (command == 21 && ruleSatisfied[16])
      {
      reply("When you were in school, riding that stupid bus home, you used to sit way down in the seat so all you could see was the sky. When you look at the sky it's always summer, and anything you want to happen can happen under the sky. You can just substitute your own reality under the sky. Today the sky is bright but not sunny, a nice kind of let's-not-bother-each-other sky.");
      variableValue[22] = true;
      }
    if (command == 23 && ruleSatisfied[17])
      {
      reply("The sky is still the same. Except for the pterodactyl circling, nothing much is happening. You're glad Harold is getting some exercise in the good weather. Maybe he'll stop chewing on the bedpost.");
      variableValue[24] = true;
      }
    if (command == 25 && ruleSatisfied[18])
      {
      reply("Harold must have gone off somewhere, and it looks like it might rain.");
      }
    if (command == 26 && ruleSatisfied[19])
      {
      reply("A little too wet for that! Maybe in a week or two.");
      variableValue[27] = true;
      }
    if (command == 28 && ruleSatisfied[20])
      {
      reply("All right, you asked for it! You find the least-wet spot and lie down. It's not that bad. You feel the warm air and the diffuse sun on your face. You feel a slight breeze. You feel the wet mud coming through your bathrobe! Ugh!");
      variableValue[29] = true;
      }
    if (command == 30 && ruleSatisfied[21])
      {
      reply("What, are you crazy?");
      }
    if (command == 31 && ruleSatisfied[22])
      {
      reply("You look over the remains of the herb garden and the supposedly all-weather bird bath. A pile of chives has reappeared, surprisingly. You never take perennials all that seriously. You remember watching your box of Christmas herb vinegars come around the luggage belt at the airport, sideways. But everyone loved the vinegars, what was left of them. Next year it'll be dried herbs, you think.");
      variableValue[32] = true;
      }
    if (command == 33 && ruleSatisfied[23])
      {
      reply("The ground is still pretty cold. Fantastic planting schemes appear in your mind, juxtaposed with the fiasco last year's fantastic planting scheme created. Maybe you should stick to simple plants this year, and no geometric pattern.");
      variableValue[34] = true;
      }
    if (command == 35 && ruleSatisfied[24])
      {
      reply("You think about turning over the herb garden, maybe just a little of it, right now. Why not? It's a beautiful day, Harold is busy, and you've got the time. You go and get your trowel. What's this? Oh, Harold's been out here hiding his toys again. Here's one of his diamond rings. Where does he get these things?");
      variableValue[36] = true;
      }
    if (command == 37 && ruleSatisfied[25])
      {
      reply("You clean off the diamond ring with your bathrobe. Yeah, it's another one of the jewel-heist rings. It would be a lot easier if he could keep his toys in the toy box. You put it in your pocket to put it away later.");
      variableValue[38] = true;
      }
    if (command == 39 && ruleSatisfied[26])
      {
      reply("It's a grubby diamond ring. Not a big deal, Harold has lots of them. You put it back in your pocket.");
      }
    }

  }
